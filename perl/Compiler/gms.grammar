start: process_definition eof
        { $return = $item[1]; }
    | <error>

process_definition: node(s)
        { $return = Compiler::AST::Node::Process->new(
                alias => 'root',
                source_path => $root_source_path, # defined in a startup_action
                nodes => $item[1] );
        }
    | <error>

node: alias(?) type parallel_statement(?) with_statements(?)
        { $return = Compiler::AST::NodeFactory::new_node(
                source_path => $item[2],
                alias => $item[1][0] || '',
                parallel => $item[3][0] || [],
                couplers => $item[4][0] || [],
            );
        }
    | <error>

alias: name "is"
        { $return = $item[1]; }
    | <error>

parallel_statement: "parallel" name(s /\*/)
        { $return = $item[2]; }

with_statements: coupler(s /,/)
        { $return = $item[1]; }
    | <error>

coupler: fully_specified_internal_statement
        { $return = $item[1]; }
    | internal_statement
        { $return = $item[1]; }
    | constant_statement
        { $return = $item[1]; }
    | <error>

fully_specified_internal_statement: name "from" fully_specified_identifier
        { $return = Compiler::AST::Coupler::FullySpecifiedInternal->new(
                name => $item[1], fully_specified_source => $item[3]); }

internal_statement: name "from" identifier
        { $return = Compiler::AST::Coupler::Internal->new(
                name => $item[1], source_node_alias => $item[3]); }

constant_statement: name "=" constant
        { $return = Compiler::AST::Coupler::Constant->new(
                name => $item[1], value => $item[3]); }

constant: /'(\\'|.)*'/
        { $return = substr $item[1], 1, -1; }
    | /-?[0-9][0-9_]*(.[0-9_]+)?/
        { $return = $item[1]; }
    | <error>

identifier: name
        { $return = $item[1]; }
    | type
        { $return = $item[1]; }
    | <error>

name: /[a-z][A-Za-z0-9_]*/
        { $return = $item[1]; }
type: /[A-Z][A-Za-z0-9_]*(::[A-Z][A-Za-z0-9_]*)*/
        { $return = $item[1]; }

fully_specified_identifier: /[a-zA-Z][A-Za-z0-9_]*(::[A-Z][A-Za-z0-9_]*)*\.[a-z][A-Za-z0-9_]*/
        { $return = $item[1]; }

eof: /^\Z/
