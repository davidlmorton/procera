start: (process_definition | tool_definition) eof
        { $return = $item[1]; }
    | <error>

process_definition: process_header operation(s)
        { $return = { operations => $item[2],
            kind => 'process' }; }
process_header: "process"

operation: alias(?) type parallel_statement(?) with_statements(?)
        { $return = { type => $item[2] };
          $return->{parallel} = $item[3][0] || undef;
          $return->{inputs} = $item[4][0] || [];
          $return->{alias} = $item[1][0] || $item[2];
        }

alias: name "is"
        { $return = $item[1]; }
    | <error>

parallel_statement: "parallel" name
        { $return = $item[2]; }

with_statements: "with" with_statement(s /,/)
        { $return = $item[2]; }

with_statement: name "from" identifier
        { $return = { property_name => $item[1],
                type => "link", source => $item[3] }; }
    | name "=" constant
        { $return = { property_name => $item[1],
                type => "constant", value => $item[3] }; }
    | <error>



tool_definition: tool_header tool_command tool_inputs(?) tool_outputs(?)
        { $return = { kind => 'tool',
                command => $item[2],
                inputs => $item[3],
                outputs => $item[4] }; }
tool_header: "tool"

tool_command: type
        { $return = $item[1]; }

tool_inputs: "inputs" tool_io_entry(s)
        { $return = $item[2]; }

tool_outputs: "outputs" tool_io_entry(s)
        { $return = $item[2]; }

tool_io_entry: type name
        { $return = { type => $item[1], name => $item[2] }; }


constant: /'(\\'|.)*'/
        { $return = substr $item[1], 1, -1; }
    | /-?[0-9][0-9_]*(.[0-9_]+)?/
        { $return = $item[1]; }
    | <error>

identifier: name
        { $return = $item[1]; }
    | type
        { $return = $item[1]; }
    | <error>

name: /[a-z][A-Za-z0-9_]*/
        { $return = $item[1]; }
type: /[A-Z][A-Za-z0-9_]*(::[A-Z][A-Za-z0-9_]*)*/
        { $return = $item[1]; }

eof: /^\Z/
