start: process_definition eof
        { $return = $item[1]; }
    | <error>

process_definition: node(s)
        { $return = Compiler::AST::Definition::Process->create(
                nodes => $item[1]);
        }

node: alias(?) type parallel_statement(?) with_statements(?)
        { $return = Compiler::AST::Node->create(
                type => $item[2],
                alias => $item[1][0] || undef,
                parallel => $item[3][0] || [],
                explicit_links => $item[4][0]{links} || [],
                explicit_constants => $item[4][0]{constants} || [],
            );
        }

alias: name "is"
        { $return = $item[1]; }
    | <error>

parallel_statement: "parallel" name(s /\*/)
        { $return = $item[2]; }

with_statements: "with" link_statement(s /,/) "," constant_statement(s /,/)
        { $return = { links => $item[2], constants => $item[4] }; }
    | "with" link_statement(s /,/)
        { $return = { links => $item[2] }; }
    | "with" constant_statement(s /,/)
        { $return = { constants => $item[2] }; }
    | <error>

link_statement: name "from" identifier
        { $return = Compiler::AST::Link::Internal->create(
                property_name => $item[1], source => $item[3]); }
constant_statement: name "=" constant
        { $return = Compiler::AST::Link::Constant->create(
                property_name => $item[1], value => $item[3]); }

constant: /'(\\'|.)*'/
        { $return = substr $item[1], 1, -1; }
    | /-?[0-9][0-9_]*(.[0-9_]+)?/
        { $return = $item[1]; }
    | <error>

identifier: name
        { $return = $item[1]; }
    | type
        { $return = $item[1]; }
    | <error>

name: /[a-z][A-Za-z0-9_]*/
        { $return = $item[1]; }
type: /[A-Z][A-Za-z0-9_]*(::[A-Z][A-Za-z0-9_]*)*/
        { $return = $item[1]; }

eof: /^\Z/
